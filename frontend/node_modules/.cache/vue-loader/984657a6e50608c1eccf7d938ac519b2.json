{"remainingRequest":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/components/analyzer/ontparser/Inner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/components/analyzer/ontparser/Inner.vue","mtime":1668549699772},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1644041617264},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1661441977623},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1644041617264},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1661441977645}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7bWFwU3RhdGV9IGZyb20gJ3Z1ZXgnCmltcG9ydCAqIGFzIGQzdGlwIGZyb20gJ0AvdXRpbHMvZDMtdGlwJwppbXBvcnQgR2xvYmFsdmlld01lbnVCYXIgZnJvbSAnQC9jb21wb25lbnRzL3V0aWxpdHkvR2xvYmFsVmlld1Rvb2wvR2xvYmFsdmlld01lbnVCYXInCmltcG9ydCB7CiAgY29tcG9uZW50RW5hYmxlRHJhZ0hhbmRsZXIsCiAgY29tcG9uZW50RGlzYWJsZURyYWdIYW5kbGVyLAp9IGZyb20gIkAvdXRpbHMvZ2xvYmFsVmlld0NhcmRVdGlscy90b29sSGVscGVyLmpzIjsKaW1wb3J0IEtHVmlld2VyIGZyb20gJy4vS0dWaWV3ZXIudnVlJwoKLy8gaW1wb3J0IE5vZGVSZWxPdmVydmlldyBmcm9tICdAL2NvbXBvbmVudHMvTm9kZVJlbE92ZXJ2aWV3JwpleHBvcnQgZGVmYXVsdHsKICBwcm9wczogWydpdGVtUHJvcHMnLCAnZml4ZWQnLCAnaW5uZXJTdHlsZSddLCAKICBjb21wb25lbnRzOiB7CiAgICBHbG9iYWx2aWV3TWVudUJhcixLR1ZpZXdlcgogIH0sICAKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlbGVjdGVkRW50aXRpZXM6IFtdLCAKICAgICAgLy8gc2VsZWN0ZWRSZWxhdGlvbnM6IFtdLAogICAgICAvLyBjdXJyZW50RW50aXRpZXM6IFtdLCAKICAgICAgLy8gY3VycmVudFJlbGF0aW9uczogW10sCiAgICAgIGxhc3NvQ29sb3I6ICJncmV5IiwgCiAgICAgIHpvb21QYW5Db2xvcjogImdyZWVuIiwgCiAgICAgIGxhc3NvU3RhdHVzOiBmYWxzZSwKICAgICAgem9vbVBhblN0YXR1czogZmFsc2UsIAogICAgICBsYXNzbzogbnVsbCwgCiAgICAgIHpvb206IG51bGwsIAogICAgICBsb2FkaW5nX3ZhbHVlOmZhbHNlLAogICAgICB0aXA6IG51bGwsCiAgICAgIHVzZXJfZGVmaW5lZF90aHJlOiA1LC8vIHVzZXIgZGVmaW5lZCB0aHJlc2hvbGQgdG8gc2hvdyBob3cgbWFueSBub2RlcyB3ZSB3YW50IHRvIHNlZSBpZiB3ZSBleHBhbmQgb25lIG5vZGUgCiAgICAgIG5lbzRqZDMgOiBudWxsLAogICAgICBicnVzaGVkOiB7ImVudGl0eV90eXBlIjogW10sICJyZWxhdGlvbnNoaXBfdHlwZSI6IFtdfSwKICAgICAgc2hvd092ZXJ2aWV3OmZhbHNlLCAKICAgICAgc2hvd01heFJldHJpZXZlOmZhbHNlLAogICAgICBmYXY6IHRydWUsCiAgICAgIG1lbnU6IGZhbHNlLAogICAgICBtZXNzYWdlOiBmYWxzZSwKICAgICAgaGludHM6IHRydWUsCiAgICAgIHNlbGVjdGVkQ29sb3I6IG51bGwsIAogICAgICBzaG93UmVzVGhyZTogZmFsc2UsIC8vIHJlc2lsaWVuY2UgdGhyZXNob2xkIGJhciAKICAgICAgcmVzaWxpZW5jZV90aHJlOiAwLCAgLy8gc2VsZWN0ZWQgdGhyZXNob2xkIG9mIHJlc2lsaWVuY2UgCiAgICAgIC8vIG1pbl9yZXNpbGllbmNlOiAwLAogICAgICBtYXhfcmVzaWxpZW5jZTogMSwgLy8gbWF4aW11bSB2YWx1ZSBvZiB0aGUgc2Nyb2xsIGJhciBmb3IgcmVzaWxpZW5jZSB0aHJlc2hvbGQgCiAgICAgIEZJWEVEOiBmYWxzZSwKICAgICAgIC8vIGN1c3RvbQogICAgICAgIGJ0bl9sb2FkaW5nOiBmYWxzZSwgLy8gcGFyc2UgbG9hZGluZyAKICAgICAgICBmb3JtRGF0YTpudWxsLAogICAgICAgIGxpbmttbDogImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS95YXNtaW5lVFlNL1BQT0RfS0cvbWFpbi9QUE9EX25ldy55YW1sIiwKICAgICAgICB2b2NhYjogImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS95YXNtaW5lVFlNL1BQT0RfS0cvbWFpbi92b2NhYnNfbmV3LnlhbWwiLAoKICAgICAgICAvLyBwYXNzIHRvIGNoaWxkcmVtOgogICAgICAgIC8vIGNoaWxkcmVuV2lkdGg6ICc2MDBweCcsCiAgICAgICAgLy8gY2hpbGRyZW5IZWlnaHQ6ICc2MDBweCcsCiAgICAgICAgZmlsdGVyV2lkdGg6ICcyMDBweCcsCiAgICAgICAgc2hvd0ZpbHRlcnM6IGZhbHNlLAogICAgICAgIGZpbHRlcnNEYXRhOiBbXSwKICAgICAgICAvLyBmaWx0ZXJzRGF0YUNvcHk6IFtdLAogICAgICAgIHNlbGVjdGVkRmlsdGVyczoge30sCiAgICAgICAgc2VhcmNoVGVybTogJycKICAgIH0KICB9LAogIGNyZWF0ZWQgKCkgewogICAgLy8gdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2dldEdyYXBoT3ZlcnZpZXcnKQogICAgLy8gd2luZG93WydkMyddID0gZDMKICAgIHRoaXMudGlwID0gZDN0aXAoKQogICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnZDMtdGlwJykKICAgICAgICAgICAgLm9mZnNldChbLTEwLCA4MF0pCiAgICAgICAgICAgIC5odG1sKGZ1bmN0aW9uKGQpIHsKICAgICAgICAgICAgICByZXR1cm4gIjxzdHJvbmc+UmVsYXRpb246IDwvc3Ryb25nPiIgKyBkICsgIjxicj48L3NwYW4+IjsKICAgIH0pCiAgICBjb25zb2xlLmxvZyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjZGl2X2dyYXBoIikpOwogICAgCiAgfSwKICBtb3VudGVkKCkgewogICAgLy8gdGhpcy5maWx0ZXJzRGF0YUNvcHkgPSBbLi4udGhpcy5maWx0ZXJzRGF0YV07CiAgfSwKICBtZXRob2RzOiB7CiAgICBwcmVwYXJlR2VuU1BBUUw6IGZ1bmN0aW9uKGUpewogICAgICAvLyBjb25zb2xlLmxvZygnY2hlY2sgZWVlZS0tLS0tLS0nLCB0aGlzLmNoZWNrRW1wdHlEaWN0KGUuZW50aXRpZXNbJ3JlbGF0aW9uJ10pKQogICAgICB0aGlzLnNlbGVjdGVkRW50aXRpZXMgPSBlWydlbnRpdGllcyddCiAgICAgIGlmKHRoaXMuY2hlY2tFbXB0eURpY3QoZS5lbnRpdGllc1sncmVsYXRpb24nXSk9PTApewogICAgICAgIGFsZXJ0KCdwbGVhc2Ugc2VsZWN0IHRoZSByZWxhdGlvbiB0eXBlIGJlZm9yZSBicnVzaGluZycpCiAgICAgIH0KICAgICAgLy9Ub0RvOiBhZGQgbW9yZSBjaGVjayBoZXJlIAogICAgICBpZih0aGlzLmNoZWNrRW1wdHlEaWN0KGUuZW50aXRpZXMpIT0wICYgdGhpcy5jaGVja0VtcHR5RGljdCh0aGlzLnNlbGVjdGVkRmlsdGVycykhPTApewogICAgICAgIHRoaXMuZ2VuU1BBUlFMKCkKICAgICAgfQogICAgfSwKICAgIGdlblNQQVJRTCgpewogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnb250cGFyc2VyL2dlblNQQVJRTCcsIHtpZDogdGhpcy5pdGVtUHJvcHMuaWQsIHNlbGVjdGVkRW50aXRpZXM6IHRoaXMuc2VsZWN0ZWRFbnRpdGllcywgc2VsZWN0ZWRGaWx0ZXJzOiB0aGlzLnNlbGVjdGVkRmlsdGVyc30pCiAgICB9LCAgCiAgICAvLyBjaGVjayBmb3IgZWFjaCAKICAgIGNoZWNrRW1wdHlEaWN0KGRpY3RfKXsKICAgICAgLy8gY29uc29sZS5sb2coZGljdF8pCiAgICAgIHZhciBjID0gMAogICAgICBmb3IgKGxldCBrZXkgaW4gZGljdF8pewogICAgICAgIC8vIGNvbnNvbGUubG9nKGRpY3RfW2tleV0pCiAgICAgICAgYyArPSBkaWN0X1trZXldLmxlbmd0aAogICAgICB9CiAgICAgIAogICAgICBjb25zb2xlLmxvZyhjKQogICAgICByZXR1cm4gYyAKICAgIH0sCiAgICBvbk5vZGVDbGljazogZnVuY3Rpb24obm9kZV9pZCl7CiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuJHJlZnMpKXsKICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB2YWx1ZVswXS5ibHVyKCkpCiAgICAgIH0KICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy4kcmVmc1snZmlsdGVyLScrbm9kZV9pZC5pZF1bMF0uZm9jdXMoKSkKICAgICAgY29uc29sZS5sb2codGhpcy4kcmVmc1snZmlsdGVyLScrbm9kZV9pZC5pZF1bMF0pCiAgICAgIGNvbnNvbGUubG9nKG5vZGVfaWQpCiAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2VsZWN0ZWRGaWx0ZXJzKQogICAgfSwgIAogICAgdmFsaWRhdGUoKXsKICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmZvcm1EYXRhLCB0aGlzLmxpbmttbCwgdGhpcy52b2NhYikKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnb250cGFyc2VyL3BhcnNlT250JywgeydpZCc6IHRoaXMuaXRlbVByb3BzLmlkLCdsaW5rbWwnOnRoaXMubGlua21sLCAndm9jYWInOnRoaXMudm9jYWJ9KQogICAgfSwKICAgIGNoYW5nZUZpbHRlcnModmFsKXsKICAgICAgaWYodGhpcy5jaGVja0VtcHR5RGljdCh0aGlzLnNlbGVjdGVkRW50aXRpZXMpIT0wICYgdGhpcy5jaGVja0VtcHR5RGljdCh0aGlzLnNlbGVjdGVkRmlsdGVycykhPTApewogICAgICAgIHRoaXMuZ2VuU1BBUlFMKCkKICAgICAgfQogICAgfSwKICAgIGRibENsaWNrSGFuZGxlcigpIHsKICAgICAgdGhpcy50b2dnbGVGaXhDb21wUG9zKCk7CiAgICB9LCAKICAgIAogICAgdG9nZ2xlRml4Q29tcFBvcygpIHsKICAgICAgdGhpcy5GSVhFRCA9ICF0aGlzLkZJWEVEOwogICAgICBpZiAoIXRoaXMuZGF0YVN0YXR1cykgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodGhpcy5GSVhFRCkgewogICAgICAgIGNvbXBvbmVudERpc2FibGVEcmFnSGFuZGxlcigKICAgICAgICAgIGAuZ2xvYmFsdmlldy1jYW52YXMtJHt0aGlzLml0ZW1Qcm9wcy5pZH1gLAogICAgICAgICAgdGhpcy50b29sU3RhdHVzCiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb21wb25lbnRFbmFibGVEcmFnSGFuZGxlcigKICAgICAgICAgIGAuZ2xvYmFsdmlldy1jYW52YXMtJHt0aGlzLml0ZW1Qcm9wcy5pZH1gLAogICAgICAgICAgdGhpcy50b29sU3RhdHVzCiAgICAgICAgKTsKICAgICAgfQogICAgfSwKICAgIHRvb2xFbmFibGVUb2dnbGVIYW5kbGVyKGUpIHsKICAgICAgYWxlcnQoZSkKICAgIH0sCiAgIAogICAgCiAgfSwKICB3YXRjaDogewogICAgYnJ1c2hlZDp7CiAgICAgIGhhbmRsZXIodmFsKXsKICAgICAgICAgIGNvbnNvbGUubG9nKHZhbCk7CiAgICAgIH0sCiAgICAgIGRlZXA6dHJ1ZSAKICAgIH0sCiAgICAnaXRlbVByb3BzLmRhdGFfb250b2xvZ3knOmZ1bmN0aW9uKHZhbCwgb2xkVmFsKXsKICAgICAgICBjb25zb2xlLmxvZyh2YWwsIG9sZFZhbCkKICAgICAgfSwKICAgICdpdGVtUHJvcHMuZGF0YV9maWx0ZXInOiBmdW5jdGlvbih2YWwsIG9sZFZhbCl7CiAgICAgICAgdGhpcy5maWx0ZXJzRGF0YSA9IFtdCiAgICAgICAgdGhpcy5zZWxlY3RlZEZpbHRlcnMgPSB7fQogICAgICAgIC8vIGNvbnNvbGUubG9nKEZpbHRlcnMpCiAgICAgICAgdmFyIGM9IDAKICAgICAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHZhbCkpewogICAgICAgICAgdmFyIHRlbXAgPSB7fSAKICAgICAgICAgIHRlbXBbJ25hbWUnXSA9IGtleSAKICAgICAgICAgIHRlbXBbJ2luZGV4J10gPSBjCiAgICAgICAgICB0ZW1wWydoZWFkX3VyaSddID0gdmFsdWVbJ2hlYWRfdXJpJ10KICAgICAgICAgIHRlbXBbJ3Blcm1pc3NpYmxlX3ZhbHVlcyddID0gW10KICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlWydwZXJtaXNzaWJsZV92YWx1ZXMnXSkKICAgICAgICAgIGMrPTEKICAgICAgICAgIGZvciAoY29uc3QgW2tleTIsIHZhbHVlMl0gb2YgT2JqZWN0LmVudHJpZXModmFsdWVbJ3Blcm1pc3NpYmxlX3ZhbHVlcyddKSl7CiAgICAgICAgICAgIHZhciBhYSA9IHZhbHVlMiAKICAgICAgICAgICAgYWFbJ25hbWUnXSA9IGtleTIKICAgICAgICAgICAgdGVtcFsncGVybWlzc2libGVfdmFsdWVzJ10ucHVzaChhYSkKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuZmlsdGVyc0RhdGEucHVzaCh0ZW1wKQogICAgICAgICAgdGhpcy5zZWxlY3RlZEZpbHRlcnNba2V5XSA9IFtdCiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZmlsdGVyc0RhdGEpCiAgICAgICAgY29uc29sZS5sb2codGhpcy5zZWxlY3RlZEZpbHRlcnMpCiAgICAgICAgdGhpcy5zaG93RmlsdGVycyA9IHRydWUgCiAgICAgIH0sCiAgICAKICB9LAogIGNvbXB1dGVkOiB7CiAgICBnZXRCb3JkZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLkZJWEVEID8gIjJweCBzb2xpZCBncmV5IiA6ICJOb25lIjsKICAgIH0sCiAgICBjaGlsZHJlbldpZHRoKCl7CiAgICAgIHJldHVybiBTdHJpbmcodGhpcy5pbm5lclN0eWxlWyd3aWR0aCddICogMC43KSsicHgiCiAgICB9LCAgCiAgICBjaGlsZHJlbkhlaWdodCgpewogICAgICByZXR1cm4gIFN0cmluZyh0aGlzLmlubmVyU3R5bGVbJ2hlaWdodCddKjAuOCkrInB4IgogICAgfSwKICB9Cn0K"},{"version":3,"sources":["Inner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Inner.vue","sourceRoot":"src/components/analyzer/ontparser","sourcesContent":["<template>\n    <div class=\"card-inner\" :style=\"{border: getBorder}\">\n       \n        <v-divider style=\"margin-top:7px; margin-bottom:4px\"></v-divider>\n        <v-row style=\"overflow: scroll\">\n          <v-col cols=\"3\">\n            <div v-if=\"showFilters\" v-for=\"(ele,index) in filtersData\" :style=\"{'width': filterWidth}\">\n                <v-select :items=\"ele.permissible_values\"\n                    item-text=\"name\"\n                    :label = \"ele.name\"\n                    :ref = \"'filter-'+ele.name\"\n                    multiple\n                    style=\"height:50px\"\n                    @change=\"changeFilters\"\n                    v-model=\"selectedFilters[ele.name]\"\n                    item-value=\"meaning\"\n                    >\n                    <!-- <template v-slot:prepend-item>\n                      <v-list-item>\n                        <v-list-item-content>\n                          <v-text-field v-model=\"searchTerm\" placeholder=\"Search\" @input=\"searchItem(ele)\"></v-text-field>\n                        </v-list-item-content>\n                      </v-list-item>\n                      <v-divider class=\"mt-2\"></v-divider>\n                    </template> -->\n                    <template v-slot:selection=\"{ item, index }\">\n                      <v-chip v-if=\"index === 0\">\n                        <span>{{ item.name }}</span>\n                      </v-chip>\n                      <span\n                        v-if=\"index === 1\"\n                        class=\"grey--text text-caption\"\n                      >\n                        (+{{ selectedFilters[ele.name].length - 1 }} others)\n                      </span>\n                  \n                    </template>\n                  </v-select>\n                <!-- <el-select @change=\"changeFilters\" v-model=\"selectedFilters[ele.name]\" multiple :placeholder=\"ele.name\" :ref=\"'filter-'+ele.name\" automatic-dropdown collapse-tags fit-input-width\t>\n                    <el-option\n                    v-for=\"item in ele.permissible_values\"\n                    :key=\"item.name\"\n                    :label=\"item.name\"\n                    :value=\"item.meaning\"\n                    />\n                </el-select>  -->\n            </div>\n          </v-col>\n          <v-col cols=\"21\">\n            <KGViewer :G=\"itemProps.data_ontology\" :height=\"childrenHeight\" :width=\"childrenWidth\"  @on-node-click-event=\"onNodeClick\" @on-lasso-event=\"prepareGenSPAQL\"></KGViewer>\n          </v-col>\n        </v-row>\n        \n        <v-overlay :value=\"loading_value\">\n        <v-progress-circular\n          indeterminate\n          size=\"64\"\n        ></v-progress-circular>\n      </v-overlay>\n    </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\nimport * as d3tip from '@/utils/d3-tip'\nimport GlobalviewMenuBar from '@/components/utility/GlobalViewTool/GlobalviewMenuBar'\nimport {\n  componentEnableDragHandler,\n  componentDisableDragHandler,\n} from \"@/utils/globalViewCardUtils/toolHelper.js\";\nimport KGViewer from './KGViewer.vue'\n\n// import NodeRelOverview from '@/components/NodeRelOverview'\nexport default{\n  props: ['itemProps', 'fixed', 'innerStyle'], \n  components: {\n    GlobalviewMenuBar,KGViewer\n  },  \n  data () {\n    return {\n      selectedEntities: [], \n      // selectedRelations: [],\n      // currentEntities: [], \n      // currentRelations: [],\n      lassoColor: \"grey\", \n      zoomPanColor: \"green\", \n      lassoStatus: false,\n      zoomPanStatus: false, \n      lasso: null, \n      zoom: null, \n      loading_value:false,\n      tip: null,\n      user_defined_thre: 5,// user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3 : null,\n      brushed: {\"entity_type\": [], \"relationship_type\": []},\n      showOverview:false, \n      showMaxRetrieve:false,\n      fav: true,\n      menu: false,\n      message: false,\n      hints: true,\n      selectedColor: null, \n      showResThre: false, // resilience threshold bar \n      resilience_thre: 0,  // selected threshold of resilience \n      // min_resilience: 0,\n      max_resilience: 1, // maximum value of the scroll bar for resilience threshold \n      FIXED: false,\n       // custom\n        btn_loading: false, // parse loading \n        formData:null,\n        linkml: \"https://raw.githubusercontent.com/yasmineTYM/PPOD_KG/main/PPOD_new.yaml\",\n        vocab: \"https://raw.githubusercontent.com/yasmineTYM/PPOD_KG/main/vocabs_new.yaml\",\n\n        // pass to childrem:\n        // childrenWidth: '600px',\n        // childrenHeight: '600px',\n        filterWidth: '200px',\n        showFilters: false,\n        filtersData: [],\n        // filtersDataCopy: [],\n        selectedFilters: {},\n        searchTerm: ''\n    }\n  },\n  created () {\n    // this.$store.dispatch('getGraphOverview')\n    // window['d3'] = d3\n    this.tip = d3tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 80])\n            .html(function(d) {\n              return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    })\n    console.log(document.querySelector(\"#div_graph\"));\n    \n  },\n  mounted() {\n    // this.filtersDataCopy = [...this.filtersData];\n  },\n  methods: {\n    prepareGenSPAQL: function(e){\n      // console.log('check eeee-------', this.checkEmptyDict(e.entities['relation']))\n      this.selectedEntities = e['entities']\n      if(this.checkEmptyDict(e.entities['relation'])==0){\n        alert('please select the relation type before brushing')\n      }\n      //ToDo: add more check here \n      if(this.checkEmptyDict(e.entities)!=0 & this.checkEmptyDict(this.selectedFilters)!=0){\n        this.genSPARQL()\n      }\n    },\n    genSPARQL(){\n      this.$store.dispatch('ontparser/genSPARQL', {id: this.itemProps.id, selectedEntities: this.selectedEntities, selectedFilters: this.selectedFilters})\n    },  \n    // check for each \n    checkEmptyDict(dict_){\n      // console.log(dict_)\n      var c = 0\n      for (let key in dict_){\n        // console.log(dict_[key])\n        c += dict_[key].length\n      }\n      \n      console.log(c)\n      return c \n    },\n    onNodeClick: function(node_id){\n      for (const [key, value] of Object.entries(this.$refs)){\n        this.$nextTick(() => value[0].blur())\n      }\n      this.$nextTick(() => this.$refs['filter-'+node_id.id][0].focus())\n      console.log(this.$refs['filter-'+node_id.id][0])\n      console.log(node_id)\n      console.log(this.selectedFilters)\n    },  \n    validate(){\n        // console.log(this.formData, this.linkml, this.vocab)\n        this.$store.dispatch('ontparser/parseOnt', {'id': this.itemProps.id,'linkml':this.linkml, 'vocab':this.vocab})\n    },\n    changeFilters(val){\n      if(this.checkEmptyDict(this.selectedEntities)!=0 & this.checkEmptyDict(this.selectedFilters)!=0){\n        this.genSPARQL()\n      }\n    },\n    dblClickHandler() {\n      this.toggleFixCompPos();\n    }, \n    \n    toggleFixCompPos() {\n      this.FIXED = !this.FIXED;\n      if (!this.dataStatus) {\n        return;\n      }\n      if (this.FIXED) {\n        componentDisableDragHandler(\n          `.globalview-canvas-${this.itemProps.id}`,\n          this.toolStatus\n        );\n      } else {\n        componentEnableDragHandler(\n          `.globalview-canvas-${this.itemProps.id}`,\n          this.toolStatus\n        );\n      }\n    },\n    toolEnableToggleHandler(e) {\n      alert(e)\n    },\n   \n    \n  },\n  watch: {\n    brushed:{\n      handler(val){\n          console.log(val);\n      },\n      deep:true \n    },\n    'itemProps.data_ontology':function(val, oldVal){\n        console.log(val, oldVal)\n      },\n    'itemProps.data_filter': function(val, oldVal){\n        this.filtersData = []\n        this.selectedFilters = {}\n        // console.log(Filters)\n        var c= 0\n        for(const [key, value] of Object.entries(val)){\n          var temp = {} \n          temp['name'] = key \n          temp['index'] = c\n          temp['head_uri'] = value['head_uri']\n          temp['permissible_values'] = []\n          // console.log(value['permissible_values'])\n          c+=1\n          for (const [key2, value2] of Object.entries(value['permissible_values'])){\n            var aa = value2 \n            aa['name'] = key2\n            temp['permissible_values'].push(aa)\n          }\n          this.filtersData.push(temp)\n          this.selectedFilters[key] = []\n        }\n        console.log(this.filtersData)\n        console.log(this.selectedFilters)\n        this.showFilters = true \n      },\n    \n  },\n  computed: {\n    getBorder() {\n      return this.FIXED ? \"2px solid grey\" : \"None\";\n    },\n    childrenWidth(){\n      return String(this.innerStyle['width'] * 0.7)+\"px\"\n    },  \n    childrenHeight(){\n      return  String(this.innerStyle['height']*0.8)+\"px\"\n    },\n  }\n}\n</script>\n<style scoped>\n.card-name {\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    height: 100%;\n  }\n\n.card-inner{\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  height: 100%;\n  overflow:scroll\n}\n\n</style>"]}]}