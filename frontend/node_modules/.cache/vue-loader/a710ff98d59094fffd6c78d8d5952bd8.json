{"remainingRequest":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/components/analyzer/ontparser/Inner.vue?vue&type=style&index=0&id=66ea5a3c&scoped=true&lang=css&","dependencies":[{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/components/analyzer/ontparser/Inner.vue","mtime":1664764275072},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1661441977636},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1661441977645},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1661441977640},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1644041617264},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1661441977645}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxhc3NvIHBhdGggewogICAgc3Ryb2tlOiByZ2IoODAsODAsODApOwogICAgc3Ryb2tlLXdpZHRoOjJweDsKfQoKLmxhc3NvIC5kcmF3biB7CiAgICBmaWxsLW9wYWNpdHk6LjA1IDsKfQoKLmxhc3NvIC5sb29wX2Nsb3NlIHsKICAgIGZpbGw6bm9uZTsKICAgIHN0cm9rZS1kYXNoYXJyYXk6IDQsNDsKfQoKLmxhc3NvIC5vcmlnaW4gewogICAgZmlsbDojMzM5OUZGOwogICAgZmlsbC1vcGFjaXR5Oi41Owp9Cgoubm90X3Bvc3NpYmxlIHsKICAgIGZpbGw6IHJnYigyMDAsMjAwLDIwMCk7Cn0KCi5wb3NzaWJsZSB7CiAgICBmaWxsOiAjRUM4ODhDOwp9Cgoubm9kZXMgLnNlbGVjdGVkIHsKICAgIC8qIGZpbGw6IGdyZWVuIWltcG9ydGFudDsgKi8KICAgIHN0cm9rZTogcmVkIWltcG9ydGFudDsKICAgIHN0cm9rZS13aWR0aDogM3B4IWltcG9ydGFudDsKICAgIHN0cm9rZTogYmxhY2s7Cn0KLnJlbGF0aW9uc2hpcHMgLnNlbGVjdGVkIHsKICAgIHN0cm9rZS13aWR0aDogNXB4ICFpbXBvcnRhbnQ7CiAgICBzdHJva2U6IHJlZCFpbXBvcnRhbnQ7CiAgICAvKiBzdHJva2U6IGdyZWVuIWltcG9ydGFudDsgKi8KfQouZ3JhcGgtYnRuLWNvbnRhaW5lcnsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgCiAgICB0b3A6IDVweDsKfQoua2ctdmlldy1idG57CiAgbWFyZ2luLXJpZ2h0OiAxMHB4Owp9CgouY2lyY2xlLWJ1dHRvbjpob3ZlcnsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5jYXJkLW5hbWUgewogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgIGZsZXgtd3JhcDogd3JhcDsKICAgIGhlaWdodDogMTAwJTsKICB9CgouY2FyZC1pbm5lcnsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBmbGV4LXdyYXA6IHdyYXA7CiAgaGVpZ2h0OiAxMDAlOwp9Cgo="},{"version":3,"sources":["Inner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkQA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Inner.vue","sourceRoot":"src/components/analyzer/ontparser","sourcesContent":["<template>\n    <div class=\"card-inner\" :style=\"{border: getBorder}\">\n        <!-- <div\n          class=\"graph-btn-container\"\n        >\n        <GlobalviewMenuBar\n          @toolEnableToggle=\"toolEnableToggleHandler\"\n        />\n        </div> -->\n        <!-- <div id=\"div_graph\" class=\"fullHeight\" :style=\"{'height': '100%'}\"></div>    -->\n        <v-form\n            ref=\"form\"\n            v-model=\"formData\"\n        >   \n            <v-row>\n                <v-col cols=\"5\">\n                    <v-text-field\n                    v-model=\"linkml\"\n                    label=\"LinkML\"\n                    required\n                    ></v-text-field>\n                </v-col>\n                <v-col cols=\"5\">\n                    <v-text-field\n                    v-model=\"vocab\"\n                    label=\"Vocabulary\"\n                    required\n                    ></v-text-field>\n                </v-col>\n            </v-row>\n            <v-btn\n            color=\"success\"\n            class=\"mr-4\"\n            @click=\"validate\"\n            :loading = \"itemProps.loadingStatus\"\n            >\n            Parse\n            </v-btn>\n        </v-form>\n        <v-divider style=\"margin-top:7px; margin-bottom:4px\"></v-divider>\n        <v-row style=\"overflow: scroll\">\n          <v-col cols=\"3\">\n            <div v-if=\"showFilters\" v-for=\"(ele,index) in filtersData\" :style=\"{'width': filterWidth}\">\n                <v-select :items=\"ele.permissible_values\"\n                    item-text=\"name\"\n                    :label = \"ele.name\"\n                    :ref = \"'filter-'+ele.name\"\n                    multiple\n                    style=\"height:50px\"\n                    @change=\"changeFilters\"\n                    v-model=\"selectedFilters[ele.name]\"\n                    item-value=\"meaning\"\n                    >\n                    <template v-slot:selection=\"{ item, index }\">\n                      <v-chip v-if=\"index === 0\">\n                        <span>{{ item.name }}</span>\n                      </v-chip>\n                      <span\n                        v-if=\"index === 1\"\n                        class=\"grey--text text-caption\"\n                      >\n                        (+{{ selectedFilters[ele.name].length - 1 }} others)\n                      </span>\n                    </template>\n                  </v-select>\n                <!-- <el-select @change=\"changeFilters\" v-model=\"selectedFilters[ele.name]\" multiple :placeholder=\"ele.name\" :ref=\"'filter-'+ele.name\" automatic-dropdown collapse-tags fit-input-width\t>\n                    <el-option\n                    v-for=\"item in ele.permissible_values\"\n                    :key=\"item.name\"\n                    :label=\"item.name\"\n                    :value=\"item.meaning\"\n                    />\n                </el-select>  -->\n            </div>\n          </v-col>\n          <v-col cols=\"21\">\n            <KGViewer :G=\"itemProps.data_ontology\" :height=\"childrenHeight\" :width=\"childrenWidth\" :selectedFilters=\"selectedFilters\" @on-node-click-event=\"onNodeClick\"></KGViewer>\n          </v-col>\n        </v-row>\n        \n        <v-overlay :value=\"loading_value\">\n        <v-progress-circular\n          indeterminate\n          size=\"64\"\n        ></v-progress-circular>\n      </v-overlay>\n    </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\nimport * as d3tip from '@/utils/d3-tip'\nimport GlobalviewMenuBar from '@/components/utility/GlobalViewTool/GlobalviewMenuBar'\nimport {\n  componentEnableDragHandler,\n  componentDisableDragHandler,\n} from \"@/utils/globalViewCardUtils/toolHelper.js\";\nimport KGViewer from './KGViewer.vue'\n\n// import NodeRelOverview from '@/components/NodeRelOverview'\nexport default{\n  props: ['itemProps', 'fixed', 'innerStyle'], \n  components: {\n    GlobalviewMenuBar,KGViewer\n  },  \n  data () {\n    return {\n      selectedEntities: [], \n      selectedRelations: [],\n      currentEntities: [], \n      currentRelations: [],\n      lassoColor: \"grey\", \n      zoomPanColor: \"green\", \n      lassoStatus: false,\n      zoomPanStatus: false, \n      lasso: null, \n      zoom: null, \n      loading_value:false,\n      tip: null,\n      user_defined_thre: 5,// user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3 : null,\n      brushed: {\"entity_type\": [], \"relationship_type\": []},\n      showOverview:false, \n      showMaxRetrieve:false,\n      fav: true,\n      menu: false,\n      message: false,\n      hints: true,\n      selectedColor: null, \n      showResThre: false, // resilience threshold bar \n      resilience_thre: 0,  // selected threshold of resilience \n      // min_resilience: 0,\n      max_resilience: 1, // maximum value of the scroll bar for resilience threshold \n      FIXED: false,\n       // custom\n        btn_loading: false, // parse loading \n        formData:null,\n        linkml: \"https://raw.githubusercontent.com/yasmineTYM/PPOD_KG/main/PPOD_new.yaml\",\n        vocab: \"https://raw.githubusercontent.com/yasmineTYM/PPOD_KG/main/vocabs_new.yaml\",\n\n        // pass to childrem:\n        // childrenWidth: '600px',\n        // childrenHeight: '600px',\n        filterWidth: '200px',\n        showFilters: false,\n        filtersData: [],\n        selectedFilters: {},\n    }\n  },\n  created () {\n    // this.$store.dispatch('getGraphOverview')\n    // window['d3'] = d3\n    this.tip = d3tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 80])\n            .html(function(d) {\n              return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    })\n    console.log(document.querySelector(\"#div_graph\"));\n    \n  },\n  methods: {\n    onNodeClick: function(node_id){\n      // id, name, color, stroke_color, type \n      // console.log(node_id)\n      // console.log(this.$refs)\n      for (const [key, value] of Object.entries(this.$refs)){\n        this.$nextTick(() => value[0].blur())\n      }\n      this.$nextTick(() => this.$refs['filter-'+node_id.id][0].focus())\n    },  \n    validate(){\n        // console.log(this.formData, this.linkml, this.vocab)\n        this.$store.dispatch('ontparser/parseOnt', {'id': this.itemProps.id,'linkml':this.linkml, 'vocab':this.vocab})\n    },\n    changeFilters(val){\n        console.log(val)\n        console.log(this.selectedFilters)\n    },\n    dblClickHandler() {\n      this.toggleFixCompPos();\n    }, \n    \n    toggleFixCompPos() {\n      this.FIXED = !this.FIXED;\n      if (!this.dataStatus) {\n        return;\n      }\n      if (this.FIXED) {\n        componentDisableDragHandler(\n          `.globalview-canvas-${this.itemProps.id}`,\n          this.toolStatus\n        );\n      } else {\n        componentEnableDragHandler(\n          `.globalview-canvas-${this.itemProps.id}`,\n          this.toolStatus\n        );\n      }\n    },\n    toolEnableToggleHandler(e) {\n      alert(e)\n    },\n   \n    \n  },\n  watch: {\n    brushed:{\n      handler(val){\n          console.log(val);\n      },\n      deep:true \n    },\n    'itemProps.data_ontology':function(val, oldVal){\n        console.log(val, oldVal)\n      },\n    'itemProps.data_filter': function(val, oldVal){\n        this.filtersData = []\n        this.selectedFilters = {}\n        // console.log(Filters)\n        var c= 0\n        for(const [key, value] of Object.entries(val)){\n          var temp = {} \n          temp['name'] = key \n          temp['index'] = c\n          temp['head_uri'] = value['head_uri']\n          temp['permissible_values'] = []\n          // console.log(value['permissible_values'])\n          c+=1\n          for (const [key2, value2] of Object.entries(value['permissible_values'])){\n            var aa = value2 \n            aa['name'] = key2\n            temp['permissible_values'].push(aa)\n          }\n          this.filtersData.push(temp)\n          this.selectedFilters[key] = []\n        }\n        console.log(this.filtersData)\n        console.log(this.selectedFilters)\n        this.showFilters = true \n      },\n    \n  },\n  computed: {\n    getBorder() {\n      return this.FIXED ? \"2px solid grey\" : \"None\";\n    },\n    childrenWidth(){\n      return String(this.innerStyle['width'] * 0.7)+\"px\"\n    },  \n    childrenHeight(){\n      return  String(this.innerStyle['height']*0.8)+\"px\"\n    },\n  }\n}\n</script>\n<style scoped>\n\n.lasso path {\n    stroke: rgb(80,80,80);\n    stroke-width:2px;\n}\n\n.lasso .drawn {\n    fill-opacity:.05 ;\n}\n\n.lasso .loop_close {\n    fill:none;\n    stroke-dasharray: 4,4;\n}\n\n.lasso .origin {\n    fill:#3399FF;\n    fill-opacity:.5;\n}\n\n.not_possible {\n    fill: rgb(200,200,200);\n}\n\n.possible {\n    fill: #EC888C;\n}\n\n.nodes .selected {\n    /* fill: green!important; */\n    stroke: red!important;\n    stroke-width: 3px!important;\n    stroke: black;\n}\n.relationships .selected {\n    stroke-width: 5px !important;\n    stroke: red!important;\n    /* stroke: green!important; */\n}\n.graph-btn-container{\n    position: relative; \n    top: 5px;\n}\n.kg-view-btn{\n  margin-right: 10px;\n}\n\n.circle-button:hover{\n  cursor: pointer;\n}\n\n.card-name {\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    height: 100%;\n  }\n\n.card-inner{\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  height: 100%;\n}\n\n</style>\n"]}]}