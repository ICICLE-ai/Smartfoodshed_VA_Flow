{"remainingRequest":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/components/viewer/graphviewer/Inner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/components/viewer/graphviewer/Inner.vue","mtime":1664764577333},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1644041617264},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1661441977623},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1644041617264},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1661441977645}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Inner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"Inner.vue","sourceRoot":"src/components/viewer/graphviewer","sourcesContent":["<template>\n    <div class=\"card-inner\" :style=\"{border: getBorder}\">\n        <div\n          class=\"graph-btn-container\"\n        >\n        <GlobalviewMenuBar\n          @toolEnableToggle=\"toolEnableToggleHandler\"\n        />\n        </div>\n        <div id=\"div_graph\" class=\"fullHeight\" :style=\"{'height': '100%'}\"></div>   \n        <v-overlay :value=\"loading_value\">\n        <v-progress-circular\n          indeterminate\n          size=\"64\"\n        ></v-progress-circular>\n      </v-overlay>\n    </div>\n</template>\n\n<script>\nimport * as Neo4jd3 from '@/js/Neo4jD3.js'\nimport * as d3Lasso from 'd3-lasso'\nimport * as d3 from 'd3'\nimport * as KGutils from '@/utils/KGutils.js'\nimport {mapState} from 'vuex'\nimport * as d3tip from '@/utils/d3-tip'\nimport GlobalviewMenuBar from '@/components/utility/GlobalViewTool/GlobalviewMenuBar'\nimport {\n  componentEnableDragHandler,\n  componentDisableDragHandler,\n} from \"@/utils/globalViewCardUtils/toolHelper.js\";\n// import NodeRelOverview from '@/components/NodeRelOverview'\nexport default{\n  props: ['itemProps', 'fixed'], \n  components: {\n    GlobalviewMenuBar\n  },  \n  data () {\n    return {\n      selectedEntities: [], \n      selectedRelations: [],\n      currentEntities: [], \n      currentRelations: [],\n      lassoColor: \"grey\", \n      zoomPanColor: \"green\", \n      lassoStatus: false,\n      zoomPanStatus: false, \n      lasso: null, \n      zoom: null, \n      loading_value:false,\n      tip: null,\n      user_defined_thre: 5,// user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3 : null,\n      brushed: {\"entity_type\": [], \"relationship_type\": []},\n      showOverview:false, \n      showMaxRetrieve:false,\n      fav: true,\n      menu: false,\n      message: false,\n      hints: true,\n      selectedColor: null, \n      showResThre: false, // resilience threshold bar \n      resilience_thre: 0,  // selected threshold of resilience \n      // min_resilience: 0,\n      max_resilience: 1, // maximum value of the scroll bar for resilience threshold \n      FIXED: false \n    }\n  },\n  created () {\n    // this.$store.dispatch('getGraphOverview')\n    // window['d3'] = d3\n    this.tip = d3tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 80])\n            .html(function(d) {\n              return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    })\n    console.log(document.querySelector(\"#div_graph\"));\n    \n  },\n  methods: {\n    dblClickHandler() {\n      this.toggleFixCompPos();\n    }, \n\n    toggleFixCompPos() {\n      this.FIXED = !this.FIXED;\n      if (!this.dataStatus) {\n        return;\n      }\n      if (this.FIXED) {\n        componentDisableDragHandler(\n          `.globalview-canvas-${this.itemProps.id}`,\n          this.toolStatus\n        );\n      } else {\n        componentEnableDragHandler(\n          `.globalview-canvas-${this.itemProps.id}`,\n          this.toolStatus\n        );\n      }\n    },\n\n\n    toolEnableToggleHandler(e) {\n      alert(e)\n    },\n    changeThreshold(){\n      // change user define threshold for how many nodes we want to expand \n      this.$store.dispatch('setExpandTh', this.user_defined_thre)\n    },\n    drawNeo4jd3 () {\n      var that = this\n      d3.selectAll(\".d3-tip\").remove()\n\n\n      if(this.neo4jd3 == null){\n        var neo4jd3 = Neo4jd3.default('#div_graph', {\n          neo4jData: this.itemProps.graphData,\n          nodeRadius: 30,\n          infoPanel: false,\n\n          onNodeDoubleClick: function (node) {\n            // that.dbclick(node)\n          },\n          onNodeMouseEnter: function (node) {\n            that.hover_node = node\n            console.log('hovering', node)\n          },\n          onNodeClick: function (node,idx) {\n            // console.log(node,id)\n            // Create dummy data\n            // console.log(node)\n            if (node.showBtnPanel == true) {\n              d3.select(`#node-${node.id}`).selectAll('.circle-button').remove()\n              node.showBtnPanel = false\n              return\n            }\n            node.showBtnPanel = true \n            var data = { b: {action: \"remove\", value: 10, pos:0} } // only two operations \n\n            if(that.itemProps.relationStatusReady==false){\n              // render the loading panel \n              console.log('nononono')\n              //\n            }else{\n              if(that.itemProps.relationStatusReady==\"fromMap\"){\n              var relation_data = node['relationship_types']\n            }\n            else{\n              // console.log(that.relationTypeData['results'][0]['data'][0]['graph']['nodes'])\n              // console.log(idx)\n              var filtered_relation_type_data = that.relationTypeData['results'][0]['data'][0]['graph']['nodes'].filter(d => d.id == node.id)\n              var relation_data = filtered_relation_type_data[0]['relationship_types']\n              // get the sum of all rel counts \n            }\n            const sumValues = obj => Object.values(obj).reduce((a, b) => a + b);\n              const total_c  = sumValues(relation_data)\n              // generate the dount data\n              for (const [key, value] of Object.entries(relation_data)) {\n                data[key] = {action: key, value: (value/total_c)*30}\n              }\n              // console.log(\"check data\")\n              // console.log(data)\n            } \n            \n            // sorting \n            \n            let this_g = d3.select(`#node-${node.id}`)\n\n            // let append_g = this_g.append('g').attr(\"transform\", \"translate(\" + node['x'] + \",\" + node['y'] + \")\");\n            let append_g = this_g\n\n              // Compute the position of each group on the pie:\n            var pie = d3.pie()\n              .sort(null) //avoiding to sort the pie, make sure the remove button in the same position \n              .value(function(d) {return d.value.value; })\n            var data_ready = pie(d3.entries(data))\n            \n\n      \n              // removal / expand operations \n            var operation_buttons_g = append_g.selectAll('whatever')\n              .data(data_ready)\n              .enter()\n            \n            var operation_buttons = operation_buttons_g.append('path')\n              .attr('d', d3.arc()\n                .innerRadius(30)         // This is the size of the donut hole\n                .outerRadius(50)\n              )\n              .attr(\"class\", \"circle-button\")\n              .attr('fill', function(d,i){ \n                if(i==0){\n                  return \"#BB6464\"\n                }else{\n                  return \"#94B49F\"\n                } \n              })\n              // .attr(\"stroke\", \"black\")\n              .style(\"stroke-width\", \"2px\")\n              .style(\"stroke\", \"white\")\n              .style(\"opacity\", 0.7)\n              .style('cursor','pointer')\n              .attr('title','test')\n\n            var hide_icon = operation_buttons_g.append('path') \n              .attr('d', 'M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7')\n              .attr(\"transform\", 'translate(20, -35) scale(0.7)')\n              .attr(\"class\", \"circle-button\")\n            \n            \n\n            d3.select('svg').call(that.tip)\n              // hovering effect \n            operation_buttons.on('mouseover', function(p){\n                d3.select(this).style('opacity',1)\n                let rel = p['data']['value']['action']\n                console.log(rel)\n                that.tip.show(rel);\n              })\n              .on('mouseout',function(p){\n                d3.select(this).style('opacity',0.7)\n                let rel = p['data']['value']['action']\n                that.tip.hide(rel);\n              })\n              .on('click', function(d,i){\n                let clicked_node_id = node['id']\n                const action = d.data.value.action \n                // console.log(d)\n                that.tip.hide(d.data.value.action)\n                if (action == \"remove\"){\n                  // tip.hide(d.data.value.action)\n                  that.$store.dispatch(\"node_remove\", {node_id: clicked_node_id})\n                }else {\n                  \n                  // console.log(d.data.value.action)\n                  that.$store.dispatch(\"node_expand\", {node_id: clicked_node_id, relation: d.data.key})\n                }\n              })\n          }\n      })\n        this.neo4jd3 = neo4jd3\n      }else{\n        this.neo4jd3.updateWithNeo4jData(this.itemProps.graphData)\n      }\n      if (that.lassoStatus) {\n        that.disableZoom()\n        that.enableLasso()\n      } \n      \n      if (that.zoomPanStatus) {\n        that.disableLasso() \n        that.enableZoomPan()\n      }\n      // that.enableLasso()\n      \n    },\n    resetGraphTableHandler(){\n      this.$store.dispatch(\"resetTableGraph\")\n    },\n    toggleZoomPanLasso(){\n      this.zoomPanStatus = !this.zoomPanStatus \n      this.lassoStatus = !this.lassoStatus\n      this.zoomPanColor = this.zoomPanStatus?\"green\":\"grey\"\n      this.lassoColor = this.lassoStatus?\"green\":\"grey\"\n    }, \n    zoomPanToggleHandler() {\n      if (!this.zoomPanStatus) {\n        this.toggleZoomPanLasso() \n        this.disableLasso()\n        this.enableZoomPan()\n      }\n    }, \n    lassoToggleHandler(){\n      if (!this.lassoStatus) {\n        this.toggleZoomPanLasso()\n        this.disableZoom()\n        this.enableLasso()\n        // this.enableZoomPan()\n      }\n      \n    },\n    enableLasso(){\n      const svg = d3.select('#div_graph').select(\"svg\")\n      var circles_question = svg.selectAll('.outline')\n      let that = this\n      var lasso_start = function () {\n        console.log(111)\n        lasso.items()\n          .attr('fill', \"green\")\n          .classed('not_possible', true)\n          .classed('selected', false)\n      }\n      var lasso_draw = function () {\n        // Style the possible dots\n        lasso.possibleItems()\n          .classed('not_possible', false)\n          .classed('possible', true)\n\n        // Style the not possible dot\n        lasso.notPossibleItems()\n          .classed('not_possible', true)\n          .classed('possible', false)\n      }\n      var lasso_end = function () {\n        lasso.items()\n          .classed('not_possible', false)\n          .classed('possible', false)\n\n        lasso.selectedItems()\n          .classed('selected', true)\n        that.selectedEntities.splice(0, that.selectedEntities.length)\n        that.selectedRelations.splice(0, that.selectedRelations.length) \n        lasso.selectedItems().each(function(d){\n          const label = this.nodeName \n          \n          if (label == \"circle\") {\n            console.log(\"adding entity\" + d.id)\n            that.selectedEntities.push(d.id)\n          }else {\n            console.log(\"adding Relations\" + d.id)\n            that.selectedRelations.push(d.id)\n          }\n          \n        })\n        // Reset the style of the not selected dots\n        // lasso.notSelectedItems()\n        \n      }\n      var lasso = d3Lasso.lasso()\n        .closePathSelect(true)\n        .closePathDistance(100)\n        .items(circles_question)\n        .targetArea(svg)\n        .on('start', lasso_start)\n        .on('draw', lasso_draw)\n        .on('end', lasso_end)\n\n      svg.call(lasso)\n    }, \n    disableLasso() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on(\".dragstart\", null);\n      svg.on(\".drag\", null);\n      svg.on(\".dragend\", null);\n    }, \n    enableZoomPan(){\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.call(d3.zoom().on('zoom', function () {\n        var scale = d3.event.transform.k,\n          translate = [d3.event.transform.x, d3.event.transform.y]\n        console.log(1)\n        const g = svg.select(\"g\")\n        g.attr('transform', 'translate(' + translate[0] + ', ' + translate[1] + ') scale(' + scale + ')')\n      }))\n      .on('dblclick.zoom', null)\n    },\n    disableZoom() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on('.zoom', null)\n    },\n    toggleOverviewPanel(focus){\n      if (focus == \"entity\") {\n        const containerFocus = document.querySelector(\"#div_node_overview\")\n        const containerUnFocus = document.querySelector(\"#div_link_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      } else{\n        const containerFocus = document.querySelector(\"#div_link_overview\")\n        const containerUnFocus = document.querySelector(\"#div_node_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      }\n    },\n    retrieve_types_nodes(){\n      this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed)\n    },\n    // circleUpdateMatchColor(){\n    //   if (this.colorMapping) {\n    //     Object.keys(this.colorMapping).forEach(category => {\n    //       d3.selectAll('.'+category).style('fill', this.colorMapping[category])\n    //     })\n    //   }\n    // },\n    recolorNode(){\n      var that = this\n      d3.select('#div_graph').selectAll('circle').style('fill',function(d){\n      // check cold chain data\n        if('resilience' in d['properties']){\n          console.log(d['properties'])\n          if(d['properties']['resilience']>=that.resilience_thre){\n            if(that.selectedColor){\n              return that.selectedColor.hex\n            }else{\n              return \"#78b3d0\"\n            }\n            \n          }else{\n            return \"#b3b3b3\"\n          }\n        }\n      })\n    }\n  },\n  watch: {\n    fixed() {\n      if (this.fixed) {\n        // componentDisableDragHandler(\n        //   `.globalview-canvas-${this.itemProps.id}`,\n        //   this.toolStatus\n        // );\n        this.enableZoomPan()\n      } else {\n        this.disableZoom()\n      }\n    },\n    selectedColor() {\n      this.recolorNode()\n      // d3.selectAll('circle').style('fill', this.selectedColor.hex)\n    },\n    resilience_thre(){\n      this.recolorNode()\n    },\n    'itemProps.graphData'() {\n      var all_resilience = []\n      this.itemProps.graphData['results'][0]['data'][0]['graph']['nodes'].forEach(function (d) {\n        d['status'] = 'unclicked'\n        // check if this is cold chain data or not \n        if(\"resilience\" in d['properties']){\n          all_resilience.push(parseFloat(d['properties']['resilience']))\n        }\n        \n      })\n      // this.min_resilience = d3.min(all_resilience)\n      this.max_resilience = d3.max(all_resilience)\n      console.log(this.max_resilience)\n      //inital the selected resilience\n      KGutils.graphDataParsing(this.itemProps.graphData, this.currentEntities, this.currentRelations)\n      this.drawNeo4jd3()\n      // this.circleUpdateMatchColor()\n    }, \n    selectedEntities(val) {\n      if (val.length > 0) {\n        console.log(\"retrieving data now!!!\")\n        console.log(val.length)\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        console.log(\"****************\")\n        console.log(val)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n        this.$store.dispatch(\"retrieveNodeGeo\", {node: this.selectedEntities})\n      }\n    }, \n    selectedRelations(val){\n      if (val.length > 0) {\n        console.log(\"****************\")\n        console.log(val.length)\n        console.log(val) \n        console.log(\"retrieving data now!!!\")\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n      }\n    }, \n    brushed:{\n      handler(val){\n          console.log(val);\n      },\n      deep:true \n    },\n    'itemProps.relationStatusReady': function (val){\n      console.log(\"relation status: \" + val) \n    },\n    'itemProps.relationTypeData':function(val) {\n      if(this.itemProps.relationStatusReady) {\n        console.log(\"relation type data is ready\")\n\n      }else{\n        console.log(\"relation type data is not ready yet!\")\n      }\n    },\n    'itemProps.loading': function(val){\n      this.loading_value = val\n    },\n    \n  },\n  computed: {\n    getBorder() {\n      return this.FIXED ? \"2px solid grey\" : \"None\";\n    },\n    // HEIGHT () {\n    //   return window.innerHeight*0.7 + 'px'\n    // },\n    // OVERVIEW_HEIGHT(){\n    //   return window.innerHeight*0.3 + 'px'\n    // }\n  }\n}\n</script>\n<style scoped>\n\n.lasso path {\n    stroke: rgb(80,80,80);\n    stroke-width:2px;\n}\n\n.lasso .drawn {\n    fill-opacity:.05 ;\n}\n\n.lasso .loop_close {\n    fill:none;\n    stroke-dasharray: 4,4;\n}\n\n.lasso .origin {\n    fill:#3399FF;\n    fill-opacity:.5;\n}\n\n.not_possible {\n    fill: rgb(200,200,200);\n}\n\n.possible {\n    fill: #EC888C;\n}\n\n.nodes .selected {\n    fill: green!important;\n    stroke-width: 3px!important;\n    stroke: black;\n}\n.relationships .selected {\n    stroke-width: 5px !important;\n    stroke: green!important;\n}\n.graph-btn-container{\n    position: relative; \n    top: 5px;\n}\n.kg-view-btn{\n  margin-right: 10px;\n}\n\n.circle-button:hover{\n  cursor: pointer;\n}\n\n.card-name {\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    height: 100%;\n  }\n\n.card-inner{\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  height: 100%;\n}\n</style>\n"]}]}