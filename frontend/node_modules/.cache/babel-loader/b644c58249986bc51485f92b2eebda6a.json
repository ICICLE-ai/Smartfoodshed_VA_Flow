{"remainingRequest":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/store/modules/loader/graph.js","dependencies":[{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/store/modules/loader/graph.js","mtime":1666790788332},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/babel.config.js","mtime":1660324544800},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1660324545335},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1661232574882}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/store/modules/loader/graph.js"],"names":["getComponentType","getTargetCard","apiClient","updateGraphInstance","retrieveGraphFromTable","$rdf","require","createNewCorpusCard","id","sourceLink","targetLink","selectedGraph","undefined","marginLeft","marginTop","width","height","data","mode","selectedGraphInstance","loadingStatus","namespaced","state","nextAvailableIndex","cards","component","mutations","ADD_COMPONENT","nextIndex","push","DELETE_COMPONENT","i","splice","console","log","ADD_SOURCE_LINK","linkData","source","ADD_TARGET_LINK","target","UPDATE_SOURCE","j","UPDATE_TARGET","REMOVE_SOURCELINK","UPDATE_LOADING_STATUS","status","ADD_DATA","cardId","SET_INPUTDATA","link","inputData","LOAD_DATA","SET_MODE","UPDATE_INSTANCE","instance","actions","addComp","commit","deleteComp","dispatch","toDeletedComp","filter","card","toDeleteSourceLink","forEach","root","addLink","updateLink","removeLink","addGraph","selectedTable","url","uri","body","mimeType","g","graph","parse","err","selected","formData","FormData","append","post","upload_res","GraphInstance","inputHandler","targetCard","length","alert","outputHandler","targetCompType"],"mappings":"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","sourcesContent":["import { getComponentType, getTargetCard } from '@/utils/help'\nimport { apiClient } from '../../../api/apiClient';\nimport { updateGraphInstance } from '../../../utils/GraphInstance';\nimport { retrieveGraphFromTable } from '../../../utils/KGutils';\nconst $rdf = require('rdflib')\nfunction createNewCorpusCard(id) {\n  return {\n    id: `card-graph-${id}`,\n    sourceLink: [], //\n    targetLink: [], \n    selectedGraph: undefined,\n    marginLeft: null,\n    marginTop: null,\n    width: null,\n    height: null,\n    data: undefined,\n    mode: 'online', \n    selectedGraphInstance: null,\n    loadingStatus: false,\n  }\n}\n\nexport default {\n  namespaced: true,\n  state: {\n    nextAvailableIndex: 0,\n    cards: [\n\n    ],\n    component: () => import('@/components/loader/graph'),\n  },\n  mutations: {\n    ADD_COMPONENT(state) {\n      const nextIndex = state.nextAvailableIndex;\n      state.nextAvailableIndex += 1\n      state.cards.push(createNewCorpusCard(nextIndex));\n    },\n    DELETE_COMPONENT(state, id) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == `${id}`) {\n          state.cards.splice(i, 1);\n          console.log(id + ' has been deleted')\n          break\n        }\n      }\n\n    },\n    ADD_SOURCE_LINK(state, linkData) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == linkData.source) {\n          state.cards[i].sourceLink.push(linkData);\n        }\n      }\n    },\n    ADD_TARGET_LINK(state, linkData) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == linkData.target) {\n          state.cards[i].targetLink.push(linkData);\n        }\n      }\n    },\n    UPDATE_SOURCE(state, linkData) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == linkData.source) {\n          for (let j in state.cards[i].sourceLink) {\n            if (state.cards[i].sourceLink[j].id == linkData.id) {\n              state.cards[i].sourceLink[j] = linkData\n            }\n          }\n        }\n      }\n    },\n    UPDATE_TARGET(state, linkData) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == linkData.target) {\n          for (let j in state.cards[i].targetLink) {\n            if (state.cards[i].targetLink[j].id == linkData.id) {\n              state.cards[i].targetLink[j] = linkData\n            }\n          }\n        }\n      }\n    },\n    REMOVE_SOURCELINK(state, linkData) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == linkData.source) {\n          for (let j in state.cards[i].sourceLink) {\n            if (state.cards[i].sourceLink[j].id == linkData.id) {\n              state.cards[i].sourceLink.splice(j, 1);\n            }\n          }\n        }\n      }\n    },\n    UPDATE_LOADING_STATUS(state, { id, status }) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == id) {\n          state.cards[i].loadingStatus = status;\n        }\n      }\n    },\n    ADD_DATA(state, data) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == data.cardId) {\n          state.cards[i].selectedGraph = data;\n        }\n      }\n    },\n    SET_INPUTDATA(state, {link, inputData}) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == link.target) {\n          state.cards[i].inputData = inputData;\n        }\n      }\n    }, \n    LOAD_DATA(state, { id, data }) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == id) {\n          state.cards[i].data = data;\n        }\n      }\n    },\n\n    SET_MODE(state, {id, mode}) {\n      for (let i in state.cards) {\n        if (state.cards[i].id === id) {\n          state.cards[i].mode = mode \n        }\n      }\n    }, \n\n    UPDATE_INSTANCE(state, {id, instance}) {\n      for (let i in state.cards) {\n        if (state.cards[i].id === id) {\n          state.cards[i].selectedGraphInstance = instance \n        }\n      }\n    } \n  },\n  actions: {\n    addComp({ commit },) {\n      console.log('adding')\n      commit('ADD_COMPONENT');\n    },\n    deleteComp({ commit, state, dispatch }, id) {\n      const toDeletedComp = state.cards.filter(card => card.id == id)[0];\n\n      const toDeleteSourceLink = [...toDeletedComp.sourceLink, ...toDeletedComp.targetLink];\n\n      toDeleteSourceLink.forEach(link => {\n        console.log(link)\n        dispatch('link/deleteComp', link.id, { root: true })\n      })\n      console.log('deleting' + id)\n      commit('DELETE_COMPONENT', id);\n    },\n    addLink({ commit, dispatch }, linkData) {\n      if (linkData.status == \"source\") {\n        commit('ADD_SOURCE_LINK', linkData)\n        dispatch('outputHandler', linkData)\n      } else {\n        commit('ADD_TARGET_LINK', linkData)\n        // // alert('Corpus card has to be the starting point');\n        // dispatch('link/deleteComp', linkData.id, { root: true });\n      }\n    },\n    updateLink({ commit }, linkData) {\n      if (linkData.status == 'source') {\n        commit('UPDATE_SOURCE', linkData)\n      } else {\n        commit('UPDATE_TARGET', linkData)\n      }\n    },\n    removeLink({ commit }, linkData) {\n      if (linkData.status == 'source') {\n        commit('REMOVE_SOURCELINK', linkData)\n      } else {\n        console.log('no use, trying to remove target link for corpus, which does not exist')\n      }\n    },\n   \n    async addGraph({ commit, dispatch, state }, data) {\n      for (let i in state.cards) {\n        if (state.cards[i].id == data.cardId && state.cards[i].selectedTable !== data) {\n          // commit('ADD_DATA', data);\n          commit('UPDATE_LOADING_STATUS', { id: data.cardId, status: true })\n          // console.log('data from graph loader')\n          console.log(data);\n          if(data.source == \"github\" && data.url){\n            var uri = 'https://example.org/resource.ttl'\n            var body = '<a> <b> <c> .'\n            var mimeType = '<text/turtle>'\n            var g = $rdf.graph()\n\n            try {\n                $rdf.parse( g=g, uri=uri, mimeType=mimeType)\n                console.log(g)\n            } catch (err) {\n                console.log(err)\n            }\n          }\n          else if(data.source == 'uploaded_file' && data.selected) {\n            // upload file \n            const formData = new FormData();\n            formData.append(\"files\", data.selected);\n            \n            let upload_res = await apiClient.post('/upload_graphfile', formData)\n            console.log('uploadding finished!!!')\n            console.log(upload_res)\n            commit('SET_MODE', {id: data.cardId, mode: 'file'})\n            commit('UPDATE_LOADING_STATUS', { id: data.cardId, status: false }) \n          } else {\n            commit('SET_MODE', {id: data.cardId, mode: 'online'})\n            const GraphInstance = updateGraphInstance(data.selected)\n            // let graphData = await axios.get('/getTable')\n            // console.log(graphData);\n            // commit('LOAD_DATA', {\n            //   id: data.cardId, data: {\n            //     data: { ...graphData.data },\n            //     tableNames: Object.keys(graphData.data)\n            //   }\n            // })\n            // commit('UPDATE_LOADING_STATUS', { id: data.cardId, status: false })\n            // console.log('adding corpusdata ############')\n            commit('UPDATE_INSTANCE', {id: data.cardId, instance: GraphInstance})\n            commit('LOAD_DATA', {\n                id: data.cardId, data: null\n            }) \n            commit('UPDATE_LOADING_STATUS', { id: data.cardId, status: false }) \n            for (let i in state.cards) {\n              if (state.cards[i].id == data.cardId) {\n                for (let j in state.cards[i].sourceLink) {\n                  dispatch('outputHandler', state.cards[i].sourceLink[j])\n                }\n              }\n            }\n          }\n        }\n      }\n\n\n    },\n\n    async inputHandler({state, commit, dispatch}, {link, inputData}) {\n      console.log(inputData)\n      const targetCard = getTargetCard(state.cards, link.target)\n      console.log(targetCard)\n      if (inputData && targetCard.selectedGraphInstance) {\n        const data = await retrieveGraphFromTable(inputData)\n        commit('SET_INPUTDATA', {link, inputData: data}) \n        if (targetCard.sourceLink.length > 0) {\n          for (let i in targetCard.sourceLink) {\n            dispatch('outputHandler', targetCard.sourceLink[i])\n          }\n        }\n      } else {\n        if (!targetCard.selectedGraphInstance) {\n          alert('you must specify graph instance to query')\n        }\n      }\n    }, \n    outputHandler({ commit, dispatch, state }, linkData) {\n      // Need to handler output since self is source\n      const targetCompType = getComponentType(linkData.target);\n      console.log('outputHandler');\n      console.log(linkData);\n      for (let i in state.cards) {\n        if (state.cards[i].id == linkData.source) {\n          dispatch(`${targetCompType}/inputHandler`, { link: linkData, inputData: state.cards[i].inputData }, { root: true })\n          // return;\n        }\n      }\n    }\n  }\n}"]}]}