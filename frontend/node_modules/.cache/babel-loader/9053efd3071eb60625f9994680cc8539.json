{"remainingRequest":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/api/apiClient.js","dependencies":[{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/api/apiClient.js","mtime":1669064166083},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/babel.config.js","mtime":1644077470344},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1644041617264},{"path":"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1661441977623}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgaHR0cHMgZnJvbSAnaHR0cHMnOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwpleHBvcnQgdmFyIGFwaUNsaWVudCA9IGF4aW9zLmNyZWF0ZSh7CiAgYmFzZVVSTDogcHJvY2Vzcy5lbnYuYmFzZV9yZXF1ZXN0X3VybCwKICAvLyBHZXQgdXJsIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGUhIFNldCBpbiBkb2NrZXItY29tcG9zZSBvciBsb2NhbC4KICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLAogIGh0dHBzQWdlbnQ6IG5ldyBodHRwcy5BZ2VudCh7CiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlCiAgfSksCiAgaGVhZGVyczogewogICAgQWNjcGV0OiAnYXBwbGljYXRpb24vanNvbicsCiAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgfQp9KTs="},{"version":3,"sources":["/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_Flow/frontend/src/api/apiClient.js"],"names":["https","axios","apiClient","create","baseURL","process","env","base_request_url","withCredentials","httpsAgent","Agent","rejectUnauthorized","headers","Accpet"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa;AACpCC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADe;AACG;AACvCC,EAAAA,eAAe,EAAE,KAFmB;AAGpCC,EAAAA,UAAU,EAAE,IAAIT,KAAK,CAACU,KAAV,CAAgB;AAC1BC,IAAAA,kBAAkB,EAAE;AADM,GAAhB,CAHwB;AAMpCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,kBADD;AAEP,oBAAgB;AAFT;AAN2B,CAAb,CAAlB","sourcesContent":["import * as https from 'https' \nimport axios from 'axios'\n\nexport const apiClient = axios.create({\n  baseURL: process.env.base_request_url, // Get url from environment variable! Set in docker-compose or local.\n  withCredentials: false, \n  httpsAgent: new https.Agent({\n    rejectUnauthorized: false\n  }), \n  headers: {\n    Accpet: 'application/json', \n    'Content-type': 'application/json'\n  }\n})\n"]}]}