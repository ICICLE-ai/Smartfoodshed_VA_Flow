{"remainingRequest":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/components/viewer/graphviewer/Inner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/components/viewer/graphviewer/Inner.vue","mtime":1661282079856},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/babel.config.js","mtime":1660324544800},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1660324545335},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1661232574882},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1660324545335},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1661232574916}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Inner.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"card-inner\">\n        <div\n          class=\"graph-btn-container\"\n        >\n        <v-container>\n        <v-row no-gutters\n          justify='space-between'\n        >\n          <v-col\n            key=\"0\"\n            sm=\"3\"\n            cols=\"11\"\n            >\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"resetGraphTableHandler\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-refresh\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Reset</span>\n            </v-tooltip>\n            <!-- <v-btn\n              small\n              class=\"kg-view-btn\"\n              @click=\"resetGraphTableHandler\"\n              >\n              Reset\n            </v-btn> -->\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  :color=\"zoomPanColor\"\n                  @click=\"zoomPanToggleHandler\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-arrow-expand-all\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>ZOOM</span>\n            </v-tooltip>\n\n            \n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  :color=\"lassoColor\"\n                  @click=\"lassoToggleHandler\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-lasso\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>LASSO</span>\n            </v-tooltip>\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"showOverview = !showOverview\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-chart-bar\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Node Link Overview</span>\n            </v-tooltip>\n\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"showMaxRetrieve = !showMaxRetrieve\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-soundbar\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Maximum Retrieval #</span>\n            </v-tooltip>\n            \n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"showResThre = !showResThre\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-soundbar\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Resilience Threshold #</span>\n            </v-tooltip>\n            \n            <v-slider\n              v-model=\"user_defined_thre\"\n              :thumb-size=\"24\"\n              @click=\"changeThreshold\"\n              max=\"1000\"\n              thumb-label=\"always\"\n              v-show=\"showMaxRetrieve\"\n            ></v-slider>\n\n            <v-slider\n              v-model=\"resilience_thre\"\n              :thumb-size=\"24\"\n              min=\"0\"\n              step=\"0.00001\"\n              :max = max_resilience\n              thumb-label=\"always\"\n              v-show=\"showResThre\"\n            ></v-slider>\n           \n          </v-col>\n        </v-row>\n        </v-container>\n        </div>\n        <div id=\"div_graph\" class=\"fullHeight\" :style=\"{'height': '100%'}\"></div>   \n        <v-overlay :value=\"loading_value\">\n        <v-progress-circular\n          indeterminate\n          size=\"64\"\n        ></v-progress-circular>\n      </v-overlay>\n    </div>\n</template>\n\n<script>\nimport * as Neo4jd3 from '@/js/Neo4jD3.js'\n// import * as d3Lasso from 'd3-lasso'\nimport * as d3 from 'd3'\nimport * as KGutils from '@/utils/KGutils.js'\nimport {mapState} from 'vuex'\nimport * as d3tip from '@/utils/d3-tip'\n// import NodeRelOverview from '@/components/NodeRelOverview'\nexport default{\n  props: ['itemProps'], \n  data () {\n    return {\n      selectedEntities: [], \n      selectedRelations: [],\n      currentEntities: [], \n      currentRelations: [],\n      lassoColor: \"grey\", \n      zoomPanColor: \"green\", \n      lassoStatus: false,\n      zoomPanStatus: true, \n      lasso: null, \n      zoom: null, \n      loading_value:false,\n      tip: null,\n      user_defined_thre: 5,// user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3 : null,\n      brushed: {\"entity_type\": [], \"relationship_type\": []},\n      showOverview:false, \n      showMaxRetrieve:false,\n      fav: true,\n      menu: false,\n      message: false,\n      hints: true,\n      selectedColor: null, \n      showResThre: false, // resilience threshold bar \n      resilience_thre: 0,  // selected threshold of resilience \n      // min_resilience: 0,\n      max_resilience: 1, // maximum value of the scroll bar for resilience threshold \n    }\n  },\n  created () {\n    // this.$store.dispatch('getGraphOverview')\n    // window['d3'] = d3\n    this.tip = d3tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 80])\n            .html(function(d) {\n              return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    })\n    console.log(document.querySelector(\"#div_graph\"));\n    \n  },\n  methods: {\n    changeThreshold(){\n      // change user define threshold for how many nodes we want to expand \n      this.$store.dispatch('setExpandTh', this.user_defined_thre)\n    },\n    drawNeo4jd3 () {\n      var that = this\n      d3.selectAll(\".d3-tip\").remove()\n\n\n      if(this.neo4jd3 == null){\n        var neo4jd3 = Neo4jd3.default('#div_graph', {\n          neo4jData: this.itemProps.graphData,\n          nodeRadius: 30,\n          infoPanel: false,\n\n          onNodeDoubleClick: function (node) {\n            // that.dbclick(node)\n          },\n          onNodeMouseEnter: function (node) {\n            that.hover_node = node\n            console.log('hovering', node)\n          },\n          onNodeClick: function (node,idx) {\n            // console.log(node,id)\n            // Create dummy data\n            // console.log(node)\n            if (node.showBtnPanel == true) {\n              d3.select(`#node-${node.id}`).selectAll('.circle-button').remove()\n              node.showBtnPanel = false\n              return\n            }\n            node.showBtnPanel = true \n            var data = { b: {action: \"remove\", value: 10, pos:0} } // only two operations \n\n            if(that.itemProps.relationStatusReady==false){\n              // render the loading panel \n              console.log('nononono')\n              //\n            }else{\n              if(that.itemProps.relationStatusReady==\"fromMap\"){\n              var relation_data = node['relationship_types']\n            }\n            else{\n              // console.log(that.relationTypeData['results'][0]['data'][0]['graph']['nodes'])\n              // console.log(idx)\n              var filtered_relation_type_data = that.relationTypeData['results'][0]['data'][0]['graph']['nodes'].filter(d => d.id == node.id)\n              var relation_data = filtered_relation_type_data[0]['relationship_types']\n              // get the sum of all rel counts \n            }\n            const sumValues = obj => Object.values(obj).reduce((a, b) => a + b);\n              const total_c  = sumValues(relation_data)\n              // generate the dount data\n              for (const [key, value] of Object.entries(relation_data)) {\n                data[key] = {action: key, value: (value/total_c)*30}\n              }\n              // console.log(\"check data\")\n              // console.log(data)\n            } \n            \n            // sorting \n            \n            let this_g = d3.select(`#node-${node.id}`)\n\n            // let append_g = this_g.append('g').attr(\"transform\", \"translate(\" + node['x'] + \",\" + node['y'] + \")\");\n            let append_g = this_g\n\n              // Compute the position of each group on the pie:\n            var pie = d3.pie()\n              .sort(null) //avoiding to sort the pie, make sure the remove button in the same position \n              .value(function(d) {return d.value.value; })\n            var data_ready = pie(d3.entries(data))\n            \n\n      \n              // removal / expand operations \n            var operation_buttons_g = append_g.selectAll('whatever')\n              .data(data_ready)\n              .enter()\n            \n            var operation_buttons = operation_buttons_g.append('path')\n              .attr('d', d3.arc()\n                .innerRadius(30)         // This is the size of the donut hole\n                .outerRadius(50)\n              )\n              .attr(\"class\", \"circle-button\")\n              .attr('fill', function(d,i){ \n                if(i==0){\n                  return \"#BB6464\"\n                }else{\n                  return \"#94B49F\"\n                } \n              })\n              // .attr(\"stroke\", \"black\")\n              .style(\"stroke-width\", \"2px\")\n              .style(\"stroke\", \"white\")\n              .style(\"opacity\", 0.7)\n              .style('cursor','pointer')\n              .attr('title','test')\n\n            var hide_icon = operation_buttons_g.append('path') \n              .attr('d', 'M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7')\n              .attr(\"transform\", 'translate(20, -35) scale(0.7)')\n              .attr(\"class\", \"circle-button\")\n            \n            \n\n            d3.select('svg').call(that.tip)\n              // hovering effect \n            operation_buttons.on('mouseover', function(p){\n                d3.select(this).style('opacity',1)\n                let rel = p['data']['value']['action']\n                console.log(rel)\n                that.tip.show(rel);\n              })\n              .on('mouseout',function(p){\n                d3.select(this).style('opacity',0.7)\n                let rel = p['data']['value']['action']\n                that.tip.hide(rel);\n              })\n              .on('click', function(d,i){\n                let clicked_node_id = node['id']\n                const action = d.data.value.action \n                // console.log(d)\n                that.tip.hide(d.data.value.action)\n                if (action == \"remove\"){\n                  // tip.hide(d.data.value.action)\n                  that.$store.dispatch(\"node_remove\", {node_id: clicked_node_id})\n                }else {\n                  \n                  // console.log(d.data.value.action)\n                  that.$store.dispatch(\"node_expand\", {node_id: clicked_node_id, relation: d.data.key})\n                }\n              })\n          }\n      })\n        this.neo4jd3 = neo4jd3\n      }else{\n        this.neo4jd3.updateWithNeo4jData(this.itemProps.graphData)\n      }\n      if (that.lassoStatus) {\n        that.disableZoom()\n        that.enableLasso()\n      } else {\n        that.disableLasso() \n        that.enableZoomPan()\n      }\n      // that.enableLasso()\n      \n    },\n    resetGraphTableHandler(){\n      this.$store.dispatch(\"resetTableGraph\")\n    },\n    toggleZoomPanLasso(){\n      this.zoomPanStatus = !this.zoomPanStatus \n      this.lassoStatus = !this.lassoStatus\n      this.zoomPanColor = this.zoomPanStatus?\"green\":\"grey\"\n      this.lassoColor = this.lassoStatus?\"green\":\"grey\"\n    }, \n    zoomPanToggleHandler() {\n      if (!this.zoomPanStatus) {\n        this.toggleZoomPanLasso() \n        this.disableLasso()\n        this.enableZoomPan()\n      }\n      \n    }, \n    lassoToggleHandler(){\n      if (!this.lassoStatus) {\n        this.toggleZoomPanLasso()\n        this.disableZoom()\n        this.enableLasso()\n        // this.enableZoomPan()\n      }\n      \n    },\n    enableLasso(){\n      const svg = d3.select('#div_graph').select(\"svg\")\n      var circles_question = svg.selectAll('.outline')\n      let that = this\n      var lasso_start = function () {\n        console.log(111)\n        lasso.items()\n          .attr('fill', \"green\")\n          .classed('not_possible', true)\n          .classed('selected', false)\n      }\n      var lasso_draw = function () {\n        // Style the possible dots\n        lasso.possibleItems()\n          .classed('not_possible', false)\n          .classed('possible', true)\n\n        // Style the not possible dot\n        lasso.notPossibleItems()\n          .classed('not_possible', true)\n          .classed('possible', false)\n      }\n      var lasso_end = function () {\n        lasso.items()\n          .classed('not_possible', false)\n          .classed('possible', false)\n\n        lasso.selectedItems()\n          .classed('selected', true)\n        that.selectedEntities.splice(0, that.selectedEntities.length)\n        that.selectedRelations.splice(0, that.selectedRelations.length) \n        lasso.selectedItems().each(function(d){\n          const label = this.nodeName \n          \n          if (label == \"circle\") {\n            console.log(\"adding entity\" + d.id)\n            that.selectedEntities.push(d.id)\n          }else {\n            console.log(\"adding Relations\" + d.id)\n            that.selectedRelations.push(d.id)\n          }\n          \n        })\n        // Reset the style of the not selected dots\n        // lasso.notSelectedItems()\n        \n      }\n      var lasso = d3Lasso.lasso()\n        .closePathSelect(true)\n        .closePathDistance(100)\n        .items(circles_question)\n        .targetArea(svg)\n        .on('start', lasso_start)\n        .on('draw', lasso_draw)\n        .on('end', lasso_end)\n\n      svg.call(lasso)\n    }, \n    disableLasso() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on(\".dragstart\", null);\n      svg.on(\".drag\", null);\n      svg.on(\".dragend\", null);\n    }, \n    enableZoomPan(){\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.call(d3.zoom().on('zoom', function () {\n        var scale = d3.event.transform.k,\n          translate = [d3.event.transform.x, d3.event.transform.y]\n        console.log(1)\n        const g = svg.select(\"g\")\n        g.attr('transform', 'translate(' + translate[0] + ', ' + translate[1] + ') scale(' + scale + ')')\n      }))\n      .on('dblclick.zoom', null)\n    },\n    disableZoom() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on('.zoom', null)\n    },\n    toggleOverviewPanel(focus){\n      if (focus == \"entity\") {\n        const containerFocus = document.querySelector(\"#div_node_overview\")\n        const containerUnFocus = document.querySelector(\"#div_link_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      } else{\n        const containerFocus = document.querySelector(\"#div_link_overview\")\n        const containerUnFocus = document.querySelector(\"#div_node_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      }\n    },\n    retrieve_types_nodes(){\n      this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed)\n    },\n    // circleUpdateMatchColor(){\n    //   if (this.colorMapping) {\n    //     Object.keys(this.colorMapping).forEach(category => {\n    //       d3.selectAll('.'+category).style('fill', this.colorMapping[category])\n    //     })\n    //   }\n    // },\n    recolorNode(){\n      var that = this\n      d3.select('#div_graph').selectAll('circle').style('fill',function(d){\n      // check cold chain data\n        if('resilience' in d['properties']){\n          console.log(d['properties'])\n          if(d['properties']['resilience']>=that.resilience_thre){\n            if(that.selectedColor){\n              return that.selectedColor.hex\n            }else{\n              return \"#78b3d0\"\n            }\n            \n          }else{\n            return \"#b3b3b3\"\n          }\n        }\n      })\n    }\n  },\n  watch: {\n    selectedColor() {\n      this.recolorNode()\n      // d3.selectAll('circle').style('fill', this.selectedColor.hex)\n    },\n    resilience_thre(){\n      this.recolorNode()\n    },\n    'itemProps.graphData'() {\n      var all_resilience = []\n      this.itemProps.graphData['results'][0]['data'][0]['graph']['nodes'].forEach(function (d) {\n        d['status'] = 'unclicked'\n        // check if this is cold chain data or not \n        if(\"resilience\" in d['properties']){\n          all_resilience.push(parseFloat(d['properties']['resilience']))\n        }\n        \n      })\n      // this.min_resilience = d3.min(all_resilience)\n      this.max_resilience = d3.max(all_resilience)\n      console.log(this.max_resilience)\n      //inital the selected resilience\n      KGutils.graphDataParsing(this.itemProps.graphData, this.currentEntities, this.currentRelations)\n      this.drawNeo4jd3()\n      // this.circleUpdateMatchColor()\n    }, \n    selectedEntities(val) {\n      if (val.length > 0) {\n        console.log(\"retrieving data now!!!\")\n        console.log(val.length)\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        console.log(\"****************\")\n        console.log(val)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n        this.$store.dispatch(\"retrieveNodeGeo\", {node: this.selectedEntities})\n      }\n    }, \n    selectedRelations(val){\n      if (val.length > 0) {\n        console.log(\"****************\")\n        console.log(val.length)\n        console.log(val) \n        console.log(\"retrieving data now!!!\")\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n      }\n    }, \n    brushed:{\n      handler(val){\n          console.log(val);\n      },\n      deep:true \n    },\n    'itemProps.relationStatusReady': function (val){\n      console.log(\"relation status: \" + val) \n    },\n    'itemProps.relationTypeData':function(val) {\n      if(this.itemProps.relationStatusReady) {\n        console.log(\"relation type data is ready\")\n\n      }else{\n        console.log(\"relation type data is not ready yet!\")\n      }\n    },\n    'itemProps.loading': function(val){\n      this.loading_value = val\n    },\n    \n  },\n  computed: {\n    // HEIGHT () {\n    //   return window.innerHeight*0.7 + 'px'\n    // },\n    // OVERVIEW_HEIGHT(){\n    //   return window.innerHeight*0.3 + 'px'\n    // }\n  }\n}\n</script>\n<style>\n\n.lasso path {\n    stroke: rgb(80,80,80);\n    stroke-width:2px;\n}\n\n.lasso .drawn {\n    fill-opacity:.05 ;\n}\n\n.lasso .loop_close {\n    fill:none;\n    stroke-dasharray: 4,4;\n}\n\n.lasso .origin {\n    fill:#3399FF;\n    fill-opacity:.5;\n}\n\n.not_possible {\n    fill: rgb(200,200,200);\n}\n\n.possible {\n    fill: #EC888C;\n}\n\n.nodes .selected {\n    fill: green!important;\n    stroke-width: 3px!important;\n    stroke: black;\n}\n.relationships .selected {\n    stroke-width: 5px !important;\n    stroke: green!important;\n}\n.graph-btn-container{\n    position: relative; \n    top: 30px;\n}\n.kg-view-btn{\n  margin-right: 10px;\n}\n\n.circle-button:hover{\n  cursor: pointer;\n}\n\n.neo4jd3{\n  margin-top:60px;\n}\n\n.card-name {\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    height: 100%;\n  }\n\n.card-inner{\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"src/components/viewer/graphviewer"}]}