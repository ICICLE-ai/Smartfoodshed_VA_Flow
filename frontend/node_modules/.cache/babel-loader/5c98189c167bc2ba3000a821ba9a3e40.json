{"remainingRequest":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/utils/KGutils.js","dependencies":[{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/utils/KGutils.js","mtime":1661241118791},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/babel.config.js","mtime":1660324544800},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1660324545335},{"path":"/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1661232574882}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/qiurui/Desktop/ICICLE/new_gui_2022/Smartfoodshed_VA_Flow/frontend/src/utils/KGutils.js"],"names":["apiClient","graphDataParsing","neo4jD3DataObj","entitiesContainer","relationsContainer","nodes","results","data","graph","relations","relationships","console","log","splice","length","forEach","node","push","id","relation","graphNodeLinkRemoval","graphData","nodeId","newGraphData","alert","i","relationRemaining","j","startNode","endNode","graphNodeLinkExpand","threshold","nodeList","relationList","passingData","expand_node","relationship_name","updatedGraphData","retrieveNodeLinkWithType","entity_type","relationship_type","path","apiCLient","generationEntityRelations","items","item","relation_id","retrieveGraphFromTable","queryData","post","result"],"mappings":"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","sourcesContent":["import { apiClient } from '../api/apiClient'\n\n\nfunction graphDataParsing(neo4jD3DataObj, entitiesContainer, relationsContainer) {\n\n    const nodes = neo4jD3DataObj.results[0].data[0].graph.nodes \n    const relations = neo4jD3DataObj.results[0].data[0].graph.relationships \n    console.log(\"getting nodes and links before parsing\")\n    // initialize entitiesContainer and relationsContainer\n   entitiesContainer.splice(0, entitiesContainer.length)\n   relationsContainer.splice(0, relationsContainer.length)\n\n   nodes.forEach(node => {\n       entitiesContainer.push(node.id)\n   })\n   relations.forEach(relation => {\n        relationsContainer.push(relation.id)\n   })\n}\n\nfunction graphNodeLinkRemoval(graphData, nodeId) { \n\n    const newGraphData = {...graphData}\n    const nodes = newGraphData.results[0].data[0].graph.nodes \n    const relations = newGraphData.results[0].data[0].graph.relationships  \n    if (nodeId == null) {\n        alert(\"empty node id to be remove\")\n    }\n    // remove nodes\n    for(let i = 0; i < nodes.length; i++){\n        if(nodes[i].id == nodeId){\n            nodes.splice(i, 1)\n            // assume no duplicate nodes\n            break\n        }\n    }\n    const relationRemaining = []\n    for(let j = 0; j < relations.length; j++){\n        \n        if(relations[j].startNode == nodeId || relations[j].endNode == nodeId){\n            console.log(\"REMOVED! - starNode: \" + relations[j].startNode + \", endNode: \" + relations[j].endNode)\n        }else{\n            relationRemaining.push(relations[j])\n        }\n    }\n    newGraphData.results[0].data[0].graph.relationships = relationRemaining \n    return newGraphData\n}\n\nasync function graphNodeLinkExpand(graphData, nodeId, relation, threshold) { \n    const newGraphData = {...graphData}\n    const nodes = newGraphData.results[0].data[0].graph.nodes \n    const relations = newGraphData.results[0].data[0].graph.relationships  \n    const nodeList = [] \n    const relationList = [] \n    nodes.forEach(node => {\n        nodeList.push(node.id)\n    })\n    relations.forEach(relation => {\n        relationList.push(relation.id)\n    })\n    \n    const passingData = {nodes: nodeList, relations: relationList, expand_node: nodeId, relationship_name:relation, threshold: threshold}\n    const updatedGraphData = await apiClient(\"/expandNodeWithR\", passingData)\n    console.log(updatedGraphData)\n    return updatedGraphData\n}\n\nasync function retrieveNodeLinkWithType(entity_type, relationship_type) { \n    let data; \n    let path; \n    if(relationship_type.length == 0){\n        path = \"getGwithEntityType\"\n        data = {\"entity_type\":entity_type}\n    } else {\n        path = \"getGwithRelationshipType\"\n        data = {\"relationship_type\":relationship_type}\n    }\n    console.log(entity_type) \n    console.log(relationship_type)\n    const updatedGraphData = await apiCLient(path, data)\n    console.log(updatedGraphData)\n    return updatedGraphData\n}\n\nfunction generationEntityRelations(items){\n    let nodes = []\n    let relations = [] \n    items.forEach(item => {\n        if(item.relation_id != null){\n            relations.push(item.relation_id)\n        }else if(item.id != null) {\n            nodes.push(item.id)\n        }else{\n            console.log(\"Error, item doesn't have id or relation_id\")\n        }\n    })\n    return {nodes, relations}\n}\n\nasync function retrieveGraphFromTable(queryData) {\n    if (queryData) {\n        const result = ((await apiClient.post('/retrieveSubgraph',queryData))).data\n        console.log(result)\n        return result\n    }\n    return null\n}\n\nexport {graphDataParsing, graphNodeLinkRemoval, graphNodeLinkExpand, retrieveNodeLinkWithType, generationEntityRelations, retrieveGraphFromTable}"]}]}